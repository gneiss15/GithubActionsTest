name: TestLinux
on:
  workflow_dispatch:
permissions:
  actions: write
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GITHUB_REPO: ${{ github.repository }}
  GITHUB_HEAD_REF: ${{ github.head_ref }}
defaults:
  run:
    shell: bash
    #working-directory: ./scripts
jobs:
  linux:
    runs-on: ubuntu-latest
    #permissions:
    #  actions: write
    steps:
    - name: Setup
      run: |
        set -x;
        REPO_DIR="${GITHUB_REPO##*/}"
        echo -e "REPO_DIR=$REPO_DIR" >> $GITHUB_ENV
        APT_CACHE_DIR="$PWD/$REPO_DIR/cache/var/cache/apt"
        echo -e "APT_CACHE_DIR=$APT_CACHE_DIR" >> $GITHUB_ENV
        #declare -p

    - name: Show Env
      run: |
        set -x
        echo "REPO_DIR: $REPO_DIR"
        echo "APT_CACHE_DIR: $APT_CACHE_DIR"

    - name: Clone the repository
      uses: actions/checkout@v4
      with:
        ref: ${{ github.head_ref }}
        path: '${{ env.REPO_DIR }}'

    - name: Mod Apt
      run: |
        set -x
        echo -e "Binary::apt::APT::Keep-Downloaded-Packages "true";\nAPT::Keep-Downloaded-Packages "true";\n" | sudo tee /etc/apt/apt.conf.d/99x-my
        
        ls -la /var/cache/apt/

        if [ ! -d "$APT_CACHE_DIR" ]; then
          echo "$APT_CACHE_DIR does not exist"
          mkdir -p "$APT_CACHE_DIR"
          sudo mv /var/cache/apt/archives/ "$APT_CACHE_DIR"
         else
          echo "$APT_CACHE_DIR exists"
          sudo rm -r /var/cache/apt/archives/
        fi
        ls -la "$APT_CACHE_DIR"
        ls -la /var/cache/apt/
        sudo ln -s "$APT_CACHE_DIR/archives/" /var/cache/apt/archives
        ls -la /var/cache/apt/
        ls -la /var/cache/apt/archives
        if [ -d /var/cache/apt/archives/ ]; then
          ls -la /var/cache/apt/archives/
        fi
        ls -la "$APT_CACHE_DIR"

    - name: apt update
      run: |
        set -x
        sudo apt update
        ls -la /var/cache/apt/
        if [ -d /var/cache/apt/archives/ ]; then
          ls -la /var/cache/apt/archives/
        fi
        ls -la "$APT_CACHE_DIR"
        sudo apt install -y locales-all
        ls -la /var/cache/apt/
        if [ -d /var/cache/apt/archives/ ]; then
          ls -la /var/cache/apt/archives/
        fi
        ls -la "$APT_CACHE_DIR"

    - name: AnyChangesInDir
      run: |
        set -x
        cd "$REPO_DIR"
        if ./AnyChangesInDir.sh; then
          echo "Changes"
          ./AddAllChangesInDir.sh
         else
          echo "No Changes"
        fi


    #- name: Info2
    #  run: |
    #    ls -la

    #- name: TestLinux1
    #  run: |
    #    set -x
    #    #set -v
    #    echo -e "Binary::apt::APT::Keep-Downloaded-Packages "true";\nAPT::Keep-Downloaded-Packages "true";\n" | sudo tee /etc/apt/apt.conf.d/99x-my
    #    mkdir -p $PWD/cache/var/cache/apt
    #    sudo mv /var/cache/apt/archives/ $PWD/cache/var/cache/apt
    #    sudo ln -s $PWD/cache/var/cache/apt/archives/ /var/cache/apt/archives
    #    ls -la /var/cache/apt/
    #    ls -la /var/cache/apt/archives/

    #    sudo apt clean
    #    ls -la /var/cache/apt/
    #    ls -la /var/cache/apt/archives/
        
    #    #apt-config dump
    #    #ls -la /var/cache/apt/
    #    #ls -la /var/cache/apt/archives/
    #    #sudo apt install -y git
    #    #ls -la /var/cache/apt/
    #    #ls -la /var/cache/apt/archives/



    #- name: Get latest release tag from prusa3d/PrusaSlicer
    #  id: get_release
    #  run: |
    #    # Fetch the latest release details from prusa3d/PrusaSlicer
    #    release=$(curl -s https://api.github.com/repos/prusa3d/PrusaSlicer/releases/latest)
    #    release_tag=$(echo $release | jq -r '.tag_name')
    #    echo "Latest release tag: $release_tag"
    #    echo "release_tag=$release_tag" >> $GITHUB_ENV
    
    #- name: Download previous release tag
    #  uses: actions/download-artifact@v4
    #  with:
    #    name: release-tag
    #    path: ./release-tag
    #  continue-on-error: true

    #- name: Set previous release tag
    #  id: set_previous_tag
    #  run: |
    #    if [ -f ./release-tag/release.txt ]; then
    #      PREVIOUS_RELEASE=$(cat ./release-tag/release.txt)
    #      echo "Previous release tag: $PREVIOUS_RELEASE"
    #    else
    #      echo "No previous release tag found, assuming this is the first run."
    #      PREVIOUS_RELEASE=""
    #    fi
    #    echo "PREVIOUS_RELEASE=$PREVIOUS_RELEASE" >> $GITHUB_ENV

    #- name: Check if new release tag is found
    #  run: |
    #    if [ "$release_tag" != "$PREVIOUS_RELEASE" ]; then
    #      echo "New release found: $release_tag"
    #      echo "NEW_RELEASE=true" >> $GITHUB_ENV
    #    else
    #      echo "No new release."
    #      echo "NEW_RELEASE=false" >> $GITHUB_ENV
    #    fi
  
    #- name: Exit if no new release
    #  run: |
    #    if [ "$NEW_RELEASE" == "false" ]; then
    #      echo "No new release found. Exiting."
    #      exit 0  # Exit the job gracefully if no new release
    #    fi  
    
    #- name: Prerequisities
    #  run: |
    #    sudo apt-get update
    #    # locales-all is needed, otherwise it will crash with LANG=ro_RO.UTF-8
    #    sudo apt-get install -y locales-all git build-essential autoconf cmake \
    #       libglu1-mesa-dev libgtk-3-dev libdbus-1-dev libwebkit2gtk-4.1-dev \
    #       desktop-file-utils libegl-mesa0 libnss-mdns libglx-mesa0 libglx0 \
    #       libxcb-dri2-0 libxcb-dri3-0 libxcb-glx0 libxcb-present0 libxcb-sync1 \
    #       libxcb-xfixes0 libxshmfence1 libgl1 libdrm2 libgbm1 libvulkan1 \
    #       zlib1g-dev libbz2-dev libboost-all-dev

    #- name: Clone PrusaSlicer repository
    #  run: |
    #    set -x on
    #    set -v
    #    git clone --recursive https://github.com/prusa3d/PrusaSlicer.git
    #    cd PrusaSlicer
    #    git fetch --tags
    #    TAG=${{ github.event.inputs.tag }}
    #    if [ -z "$TAG" ]; then
    #      TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
    #    fi
    #    git checkout $TAG
    #    CLEAN_TAG=$(echo $TAG|sed -e 's|version_||g')
    #    echo "VERSION=$CLEAN_TAG" >> $GITHUB_ENV
    #    # Change Version-Info from ...UNKNOW to ...gneiss15
    #    sed -i "s/UNKNOWN/gneiss15/g" version.inc
    #    # Needed till Eigen Checksum fixed
    #    sed -i "s/URL_HASH.*//g" deps/+Eigen/Eigen.cmake
    #    #sed -i "s/e09b89aae054e9778ee3f606192ee76d645eec82c402c01c648b1fe46b6b9857/4815118c085ff1d5a21f62218a3b2ac62555e9b8d7bacd5093892398e7a92c4b/g" deps/+Eigen/Eigen.cmake

    #- name: ccache
    #  uses: hendrikmuhs/ccache-action@v1.2
    #  with:
    #    key: ${{ runner.os }}

    #- name: Determine dependency hash
    #  id: dephash
    #  run: |
    #       cd PrusaSlicer 
    #       echo dephash=$(git rev-parse HEAD:deps) >> $GITHUB_OUTPUT

    #- name: Cache Dependencies
    #  id: cache-dependencies
    #  uses: actions/cache@v4
    #  with:
    #    path: PrusaSlicer/deps/build/destdir
    #    key: dependencycache-${{ runner.os }}-${{ steps.dephash.outputs.dephash }}

    #- name: Cache Download Files
    #  if: steps.cache-dependencies.outputs.cache-hit != 'true'
    #  id: cache-download
    #  uses: actions/cache@v4
    #  with:
    #    path: PrusaSlicer/deps/download
    #    key: downloadcache-${{ runner.os }}-${{ github.run_id }}
    #    restore-keys: |
    #      downloadcache-${{ runner.os }}

    #- name: Download GMP
    #  if: steps.cache-dependencies.outputs.cache-hit != 'true'
    #  run: |
    #    rm -rf PrusaSlicer/deps/build/destdir/*
    #    mkdir -p PrusaSlicer/deps/download/GMP
    #    test -r PrusaSlicer/deps/download/GMP/gmp-6.2.1.tar.bz2 || curl -o PrusaSlicer/deps/download/GMP/gmp-6.2.1.tar.bz2 https://ftp.gnu.org/gnu/gmp/gmp-6.2.1.tar.bz2

    #- name: Build dependencies
    #  if: steps.cache-dependencies.outputs.cache-hit != 'true'
    #  run: |
    #    export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
    #    cd PrusaSlicer/deps
    #    mkdir -p build
    #    cd build
    #    cmake .. -DDEP_WX_GTK3=ON -DDEP_DOWNLOAD_DIR=$(pwd)/../download -DBOOST_ROOT=$(pwd)/../build/destdir/usr/local
    #    make -j $(nproc)

    #- name: Build PrusaSlicer
    #  run: |
    #    export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
    #    mkdir -p PrusaSlicer/build
    #    cd PrusaSlicer/build
    #    cmake .. -DSLIC3R_STATIC=1 -DSLIC3R_GTK=3 -DSLIC3R_PCH=OFF -DCMAKE_PREFIX_PATH=$(pwd)/../deps/build/destdir/usr/local -DCMAKE_INSTALL_PREFIX=/usr
    #    make -j $(nproc)
    #    sudo make install
    #    find ../deps/build/destdir/usr/local

    #- name: Bundle
    #  run: sh -ex ./bundle.sh

    #- name: Upload to GitHub Releases
    #  run: |
    #    gh release delete $VERSION -y || true
    #    gh release create $VERSION *.AppImage* --title "$VERSION"
